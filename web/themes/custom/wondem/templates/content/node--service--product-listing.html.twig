{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'p-6',
    'lg:py-12',
    'lg:pl-10',
    'lg:pr-12',
  ]
%}
<article{{ attributes.addClass(classes) }}>
  <header class="lg:mb-2">
    {{ title_prefix }}
      <h2{{ title_attributes }}>
        <a class="text-black font-semibold text-2xl leading-7 lg:text-custom-1 lg:leading-custom-1" href="{{ url }}" rel="bookmark">{{ label }}</a>
      </h2>
    {{ title_suffix }}
  </header>
  <div{{ content_attributes.addClass('node__content', 'lg:flex', 'lg:flex-row',) }}>
    <div class="lg:basis-2/5">
      {{ content.field_starting_price }}
      {{ content.field_ratings }}
      {# If the produce features is filled out. #}
      {% if node.field_product_features.value %}
        {{ content.field_product_features }}
      {% else %}
        {# Default to in stock message. #}
        {{ content.field_in_stock }}
      {% endif %}
      <div class="hidden lg:block mt-8">
        <a href="{{ url }}" rel="bookmark" class="h-6 flex text-black font-semibold text-2xl uppercase leading-6">
          <span class="mr-4 h-6 tracking-[0.175em]">Request Rental</span>
          <svg xmlns="http://www.w3.org/2000/svg" class=" w-6 h-6 text-custom-blue-1" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
          </svg>
        </a>
      </div>
    </div>
    <div class="lg:basis-3/5 lg:pl-2">
      {{ content.field_image}}
    <div>
  </div>
  <footer class="mt-6 lg:hidden">
    <a href="{{ url }}" rel="bookmark" class="h-5 flex text-black font-semibold text-sm uppercase leading-5">
      <span class="mr-4 h-5 tracking-[0.175em]">Request Rental</span>
      <svg xmlns="http://www.w3.org/2000/svg" class=" w-5 h-5 text-custom-blue-1" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
      </svg>
    </a>
  </footer>
</article>
